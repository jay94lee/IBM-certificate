# 1. Install and Import Dependencies 

# terminal
# pip install torch==2.0.1+cu117 torchvision==0.15.2+cu117
# aws s3 cp --profile aip-ai-expert s3://expert-user3/yolov5l.pt .  #dependency manual download 
# https://github.samsungds.net/aip-ai-expert/user3.git #ds git hub clone(yolov5) 
# pip install -r /home/jovyan/yolov5/requirements.txt #requirement install


import torch
from matplotlib import pyplot as plt
import numpy as np
import cv2



# 2. Load Model

cd yolov5

# Normal torch.hub method can't be used because of no internet connection
# model = torch.hub.load('.', 'custom', '/home/jovyan/yolov5/yolov5s.pt', source='local')
# Or you can use code bellow
from  hubconf import custom
model = custom(path='/home/jovyan/yolov5/yolov5l.pt')



# 3. Make Detections with Images

cd

# add image locally
img = '123452102.jpg'

#checking model default setting 
results = model(img)

%matplotlib inline
plt.imshow(np.squeeze(results.render()))
plt.show()
# We can see that model can't detect fire in the image




# 4. Train with custom data

import os
import cv2
import torch
import numpy as np
import pandas as pd
import shutil as sh
import matplotlib.pyplot as plt

# check for numder of data
len(os.listdir(os.path.join('/home/jovyan/fire/train', 'labels')))
len(os.listdir(os.path.join('/home/jovyan/fire/val', 'labels')))
len(os.listdir(os.path.join('/home/jovyan/fire/test', 'labels')))



# making fireconfig.yaml
with open('/home/jovyan/yolov5/fireconfig.yaml', 'w+') as f:
    f.write('path: /home/jovyan/fire\n')
    f.write('train: train/images\n')
    f.write('val: val/images\n')
    f.write('test: test/images\n\n')
    f.write('names:\n')
    f.write('  0: fire')


# checking for the GPU connection
import torch
torch.__version__

import torch
torch.cuda.is_available()


%cd '/home/jovyan/yolov5'

# finetuning with custom data
# currently using GPU, NVIDIA A100 80GB PCIe MIG 1g.10gb, 9728MiB, total 10gb
!python train.py --img 640 --batch 12  --epochs 20 --data fireconfig.yaml --weights yolov5l.pt  --exist-ok 


os.listdir(os.path.join('/home/jovyan/yolov5', 'runs', 'train'))

# change weight with best training data
from  hubconf import custom
model = custom(path='/home/jovyan/yolov5/runs/train/exp/weights/best.pt')


cd

results = model(img)
results.print()


%matplotlib inline
plt.imshow(np.squeeze(results.render()))
plt.show()
# Only custom class 'fire' detected


# in 'result.csv' and 'result.png', we can see the model precision and recall
# few images corrupted. non-normalized or out of bounds coordinates -> must ne labeled again
# precision 




모델 : Yolov5

데이터 : https://github.com/spacewalk01/yolov5-fire-detection.git
아래 kaggle dataset yolo 형식으로 변형한 dataset
https://www.kaggle.com/dataclusterlabs/fire-and-smoke-dataset
https://www.kaggle.com/atulyakumar98/fire-and-gun-dataset

Resource : CPU(4.0), Memory(16.0Gi), GPU( NVIDIA A100 80GB PCIe MIG 1g.10gb)     

Code
...

위의 fire dataset 이용 yolov5l 에 finetuning하여 이미지에서 화재를 감지할 수 있도록 test 하였습니다. 
GPU의 제한으로 인해 yolov5l로는 batch 12정도가 최대 설정 가능한 크기였습니다.
epoch 50으로 학습한 경우 precision:0.57, recall:0.52 

현업 Data : CCTV 권한 획득하여 현재 데이터 수집 가능합니다. 송전탑 가리키는 영상의 경우 1080p 입니다. 
1달 이내의 데이터만 저장되어 있어 이상데이터를 수집하는데 어려움이 있습니다. 
이상데이터는 test code와 비슷하게 퍼블릭데이터 수집하여 학습시키고, CCTV데이터는 각 사물 detection 하는 방향으로 학습 시키는 것 고려중입니다. 
test 시에 CCTV사진에 임의로 물체 합성하는 방식도 생각하였으나 실질적인 의미는 적을 것으로 보입니다. 
혹은 임의로 영상에 이상 현상 모의하여 test 하는 방식도 가능할 것으로 보입니다. 


Code
GPU 추가 배정이 있기 전까지는 제한된 resource 내에서 진행해야하는데,
모델의 크기(s,m,l) 및 batch, epoch등을 적절하게 설정하는 방법
화재의 경우 특히 빛 반사 등을 불꽃으로 판단하는 경우가 있는데, 이런 오류는 어떻게 잡을 수 있는지
열화상 데이터 수집에서 이벤트 보내고 있는게 있는데, 작업 하는 경우 등에 사람의 체온을 감지하여 알람을 보내고 있는 듯 함.
이 데이터에서 사람을 detection 하여 작업자의 체온이 높은 경우는 제외할 수 있도록 하는건?


추가 문의사항 : 
- frame anomaly detection처럼 frame단위로 이상 데이터를 잡아내는 방법
- 영상 object detection, custom labeling 후 test, 이상 데이터 학습, 이상 데이터 detection


- 배터리룸 연기 감지 
연기 데이터 : 
https://github.com/gengyanlei/fire-smoke-detect-yolov4/blob/master/readmes/README_EN.md
https://drive.google.com/file/d/1ydVpGphAJzVPCkUTcJxJhsnp_baGrZa7/view?usp=sharing


